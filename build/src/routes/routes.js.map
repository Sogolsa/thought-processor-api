{"version":3,"file":"routes.js","names":["_thoughtControllers","require","_userControllers","_passport","_interopRequireDefault","_auth","_expressValidator","e","__esModule","routes","app","loginRoute","route","post","passport","authenticate","session","logoutUser","check","isLength","min","isAlphanumeric","not","isEmpty","isEmail","registerUser","put","withMessage","optional","req","res","next","errors","validationResult","status","json","array","updateUser","deleteUser","addNewThought","get","getOwnThoughts","updateThought","deleteThought","_default","exports"],"sources":["../../../server/src/routes/routes.js"],"sourcesContent":["import {\r\n  addNewThought,\r\n  getOwnThoughts,\r\n  getThoughtByName,\r\n  updateThought,\r\n  deleteThought,\r\n} from '../controllers/thoughtControllers';\r\nimport {\r\n  registerUser,\r\n  deleteUser,\r\n  getUsers,\r\n  updateUser,\r\n  logoutUser,\r\n} from '../controllers/userControllers';\r\nimport passport from 'passport';\r\nimport loginRoute from '../../auth';\r\nimport { check, validationResult } from 'express-validator';\r\n\r\nconst routes = (app) => {\r\n  // Initialize the login route\r\n  loginRoute(app); // Call the loginRoute function and pass the app instance\r\n\r\n  //users endpoint\r\n  app\r\n    .route('/logout')\r\n    .post(passport.authenticate('jwt', { session: false }), logoutUser);\r\n  app\r\n    .route('/users')\r\n    // .get(passport.authenticate('jwt', { session: false }), getUsers)\r\n    .post(\r\n      [\r\n        // Validation logic to register user\r\n        check('userName', 'userName is required').isLength({ min: 1 }),\r\n        check(\r\n          'userName',\r\n          'userName contains non alphanumeric characters-not allowed.'\r\n        ).isAlphanumeric(),\r\n        check('Password', 'Password is required').not().isEmpty(), // Is not empty\r\n        check('Email', 'Email does not appear to be valid.').isEmail(),\r\n      ],\r\n      registerUser\r\n    );\r\n\r\n  app\r\n    .route('/users/:userId')\r\n    .put(\r\n      passport.authenticate('jwt', { session: false }),\r\n      [\r\n        // Validation logic to update\r\n        check('userName')\r\n          .isLength({ min: 1 }) // Ensure userName is at least 4 characters\r\n          .withMessage('userName must be at least 4 characters long.')\r\n          .isAlphanumeric()\r\n          .withMessage(\r\n            'userName contains non-alphanumeric characters - not allowed.'\r\n          ),\r\n        check('Password')\r\n          .isLength({ min: 6 }) // Ensure Password is at least 6 characters\r\n          .withMessage('Password must be at least 6 characters long.')\r\n          .not()\r\n          .isEmpty()\r\n          .withMessage('Password is required.'),\r\n        check('Email')\r\n          .optional() // Email is optional\r\n          .isEmail()\r\n          .withMessage('Email does not appear to be valid.'),\r\n      ],\r\n      (req, res, next) => {\r\n        const errors = validationResult(req);\r\n        if (!errors.isEmpty()) {\r\n          return res.status(422).json({ errors: errors.array() });\r\n        }\r\n        next(); // Proceed to updateUser if validation passed\r\n      },\r\n      updateUser\r\n    )\r\n    .delete(passport.authenticate('jwt', { session: false }), deleteUser);\r\n\r\n  app\r\n    .route('/thoughts')\r\n    .post(passport.authenticate('jwt', { session: false }), addNewThought)\r\n    .get(passport.authenticate('jwt', { session: false }), getOwnThoughts);\r\n  app\r\n    .route('/thoughts/:thoughtId')\r\n    // .get(passport.authenticate('jwt', { session: false }), getThoughtByName)\r\n    .put(passport.authenticate('jwt', { session: false }), updateThought)\r\n    .delete(passport.authenticate('jwt', { session: false }), deleteThought);\r\n};\r\n\r\nexport default routes;\r\n"],"mappings":"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","ignoreList":[]}