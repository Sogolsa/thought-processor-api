{"version":3,"file":"models.js","names":["_mongoose","_interopRequireDefault","require","_bcrypt","_encryption","e","__esModule","Schema","mongoose","thoughtSchema","exports","thoughtName","type","String","required","Description","Emotions","Problems","possibleSolutions","Affirmation","User","Types","ObjectId","ref","created_date","Date","now","pre","next","includes","encrypt","Array","isArray","map","emotion","problem","solution","methods","toJSON","thought","toObject","decrypt","length","userSchema","userName","Password","Email","Thoughts","statics","hashPassword","password","bcrypt","hashSync","validatePassword","compareSync","Thought","model","_default"],"sources":["../../../server/src/models/models.js"],"sourcesContent":["import mongoose from 'mongoose';\r\nimport bcrypt from 'bcrypt';\r\nimport { encrypt, decrypt } from '../utils/encryption';\r\n\r\nconst Schema = mongoose.Schema;\r\n\r\nexport const thoughtSchema = new Schema({\r\n  thoughtName: {\r\n    type: String,\r\n    required: true,\r\n  },\r\n  Description: {\r\n    type: String,\r\n    required: false,\r\n  },\r\n  Emotions: {\r\n    type: [String],\r\n  },\r\n  Problems: {\r\n    type: [String],\r\n  },\r\n  possibleSolutions: {\r\n    type: [String],\r\n  },\r\n  Affirmation: {\r\n    type: String,\r\n  },\r\n  User: {\r\n    type: mongoose.Schema.Types.ObjectId,\r\n    ref: 'User',\r\n  },\r\n  created_date: {\r\n    type: Date,\r\n    default: Date.now,\r\n  },\r\n});\r\n\r\n// Encrypt sensitive fields before saving with pre save middleware\r\nthoughtSchema.pre('save', function (next) {\r\n  if (this.thoughtName && !this.thoughtName.includes('|')) {\r\n    this.thoughtName = encrypt(this.thoughtName);\r\n  }\r\n\r\n  if (this.Description && !this.Description.includes('|')) {\r\n    this.Description = encrypt(this.Description); // Encrypt Description\r\n  }\r\n\r\n  if (this.Emotions && Array.isArray(this.Emotions)) {\r\n    this.Emotions = this.Emotions.map((emotion) => {\r\n      if (emotion && !emotion.includes('|')) {\r\n        return encrypt(emotion); // Encrypt if it's not encrypted yet\r\n      }\r\n      return emotion;\r\n    }); // Encrypt each emotion\r\n  }\r\n\r\n  if (\r\n    this.Problems &&\r\n    Array.isArray(this.Problems) &&\r\n    !this.Problems.includes('|')\r\n  ) {\r\n    this.Problems = this.Problems.map((problem) => {\r\n      if (problem && !problem.includes('|')) {\r\n        return encrypt(problem); // Encrypt if it's not encrypted yet\r\n      }\r\n      return problem;\r\n    });\r\n  }\r\n\r\n  if (\r\n    this.possibleSolutions &&\r\n    Array.isArray(this.possibleSolutions) &&\r\n    !this.possibleSolutions.includes('|')\r\n  ) {\r\n    this.possibleSolutions = this.possibleSolutions.map((solution) => {\r\n      if (solution && !solution.includes('|')) {\r\n        return encrypt(solution); // Encrypt if it's not encrypted yet\r\n      }\r\n      return solution;\r\n    });\r\n  }\r\n  if (this.Affirmation && !this.Affirmation.includes('|')) {\r\n    this.Affirmation = encrypt(this.Affirmation); // Encrypt Affirmation\r\n  }\r\n  next();\r\n});\r\n\r\n// Decrypt sensitive fields after fetching from the database\r\nthoughtSchema.methods.toJSON = function () {\r\n  const thought = this.toObject(); // convert a Mongoose document into a plain JavaScript object\r\n\r\n  if (thought.thoughtName) {\r\n    thought.thoughtName = decrypt(thought.thoughtName); // Decrypt thoughtName\r\n  }\r\n\r\n  if (thought.Description) {\r\n    thought.Description = decrypt(thought.Description); // Decrypt Description\r\n  }\r\n  if (thought.Emotions && thought.Emotions.length > 0) {\r\n    thought.Emotions = thought.Emotions.map((emotion) => decrypt(emotion)); // Decrypt each emotion\r\n  }\r\n  if (thought.Problems && thought.Problems.length > 0) {\r\n    thought.Problems = thought.Problems.map((problem) => decrypt(problem)); // Decrypt each problem\r\n  }\r\n  if (thought.possibleSolutions && thought.possibleSolutions.length > 0) {\r\n    thought.possibleSolutions = thought.possibleSolutions.map((solution) =>\r\n      decrypt(solution)\r\n    ); // Decrypt each possible solution\r\n  }\r\n  if (thought.Affirmation) {\r\n    thought.Affirmation = decrypt(thought.Affirmation); // Decrypt Affirmation\r\n  }\r\n\r\n  return thought;\r\n};\r\n\r\nexport const userSchema = new Schema({\r\n  userName: { type: String, required: true },\r\n  Password: {\r\n    type: String,\r\n    required: true,\r\n  },\r\n  Email: {\r\n    type: String,\r\n    required: true,\r\n  },\r\n  Thoughts: [\r\n    {\r\n      type: mongoose.Schema.Types.ObjectId,\r\n      ref: 'Thought',\r\n    },\r\n  ],\r\n});\r\n\r\n// Adding hashPassword function for hashing passwords\r\nuserSchema.statics.hashPassword = (password) => {\r\n  return bcrypt.hashSync(password, 10);\r\n};\r\n\r\n// Adding validatePassword to compare hashed passwords\r\nuserSchema.methods.validatePassword = function (password) {\r\n  return bcrypt.compareSync(password, this.Password);\r\n};\r\n\r\n// Creating the models\r\nconst Thought = mongoose.model('Thought', thoughtSchema);\r\nconst User = mongoose.model('User', userSchema);\r\n\r\nexport default { Thought, User };\r\n"],"mappings":"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","ignoreList":[]}